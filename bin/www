#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('udoo-cfg:server');
var http = require('http');
var server = http.createServer(app);
// Utilities
var ifconfig = require('wireless-tools/ifconfig');
var exec = require('child_process').exec;
var fs = require('fs');
var port = normalizePort(process.env.PORT || '80');
app.set('port', port);


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var acc = 0;
var gyro = 0;
var magn =0;

/* TODO UDOO Neo's Controller Related functions, to be eventually moved outta here */
var self = this;
var clientconnected = false;
var io = require('socket.io')(server);
io.on('connection', function(socket){
  var self = this;
  clientconnected = true;
  console.log('Frontend Connected');
  /*
  // Get IP Addresses
  setInterval(function () {
  getsysteminfos();
  }, 10000);

  if (clientconnected) {

      getMotionSensors();

  }
*/
  socket.on('fade', function(){
    console.log('Fade');
    uploadsketchfade();

  });

  socket.on('blink', function(){
    console.log('Blink');
    uploadsketchblink();

  });

  socket.on('move', function(data){
    console.log(data);
    fs.writeFile('/dev/ttyMCC', data, function(error) {
      if (error) {
        console.error("write error:  " + error.message);
      } else {
        console.log(data);
      }
    });
  });

  socket.on('disconnect', function () {
    var self = this;
    clientconnected = false;
   console.log('Client Disconnected');
  });
});

function getsysteminfos(){
  var self = this;

  var ethip = 'Not Connected';
  var wlanip = 'Not Connected';
  var usbip = 'Not Connected';
  var bt = 'Not Connected';

  ifconfig.status('eth0', function(err, status) {
    if (status.ipv4_address != undefined ) {
      var self = this;
      ethip = status.ipv4_address;
      io.emit('ethstatus', ethip);
    }
  });

  ifconfig.status('wlan', function(err, status) {
    var self = this;
    if (status.ipv4_address != undefined ) {
      wlanip = status.ipv4_address;
      io.emit('wlanstatus', wlanip);
    }
  });

  ifconfig.status('usb0', function(err, status) {
    var self = this;
    if (status.ipv4_address != undefined ) {
      usbip = status.ipv4_address;
      io.emit('usbstatus', usbip);
    }
  });

}
function getMotionSensors(){
// Motion Sensors


  console.log('Reading Motion Sensors Values');

  exec("echo 1 > /sys/class/misc/FreescaleGyroscope/enable", function (error, stdout, stderr) {
    if (error !== null) {
      console.log('Cannot Enable Gyroscope: '+error);
    }
    else {
      console.log('Gyroscope enabled');
    }
  });
  exec("echo 1 > /sys/class/misc/FreescaleAccelerometer/enable", function (error, stdout, stderr) {
    if (error !== null) {
      console.log('Cannot Enable Accelerometer: '+error);
    }
    else {
      console.log('Accelerometer enabled');
    }
  });
  exec("echo 1 > /sys/class/misc/FreescaleMagnetometer/enable", function (error, stdout, stderr) {
    if (error !== null) {
      console.log('Cannot Enable Magnetometer: '+error);
    }
    else {
      console.log('Magnetometer enabled');
    }
  });
  setInterval(function () {
    fs.readFile('/sys/class/misc/FreescaleAccelerometer/data', 'utf8', function (err,accel) {
      var self=this;
      if (err) {
        return console.log(err);
      }
      str = accel;
      var arr = str.split(",");
      arr = arr.map(function (val) { return +val + 1; });
      acc1 = Math.sqrt(((arr[0])*(arr[0]))+(((arr[1]))*(arr[1]))+((arr[2])*(arr[2]))).toFixed(0);
      acc2 = acc1/1630;
      acc3 = acc2.toFixed(0);
      acc = acc3*acc3-90;
      //console.log('acc'+acc);
    });
    fs.readFile('/sys/class/misc/FreescaleGyroscope/data', 'utf8', function (err,gyrosc) {
      var self=this;
      if (err) {
        return console.log(err);
      }
      str = gyrosc;
      var arr = str.split(",");
      arr = arr.map(function (val) { return +val + 1; });
      gyro2 = Math.floor(Math.sqrt(((arr[0])*(arr[0]))+(((arr[1]))*(arr[1]))+((arr[2])*(arr[2]))));
      if (gyro2 > 150) {
        gyro = 150
      } else gyro = gyro2;
      //console.log(data);
    });

    fs.readFile('/sys/class/misc/FreescaleMagnetometer/data', 'utf8', function (err,magnet) {
      var self=this;
      if (err) {
        return console.log(err);
      }
      str = magnet;
      var arr = str.split(",");
      arr = arr.map(function (val) { return +val + 1; });
      magn1 = Math.floor(Math.sqrt(((arr[0])*(arr[0]))+(((arr[1]))*(arr[1]))+((arr[2])*(arr[2]))));
      magn2 = magn1/100;
      magn3 = magn2.toFixed(0);
      if (magn3 > 150) {
        magn = 150
      } else magn = magn3;
      //console.log(data);
    });
    io.emit('motion', {a:acc, g:gyro, m:magn})
  }, 300);
}

function uploadsketchblink() {
  exec("/usr/bin/udooneo-m4uploader /opt/udoo-web-conf/arduino_examples/Blink.cpp.bin", function (error, stdout, stderr) {
    if (error !== null) {
      console.log('Cannot Upload Sketch' +error);
    }
    else {
      console.log('Fade Blink Properly Uploaded ');
    }
  });
}

function uploadsketchfade(){
  exec("/usr/bin/udooneo-m4uploader /opt/udoo-web-conf/arduino_examples/Fade.cpp.bin", function (error, stdout, stderr) {
    if (error !== null) {
      console.log('Cannot Upload Sketch' +error);
    }
    else {
      console.log('Fade Sketch Properly Uploaded ');
    }
  });
}


